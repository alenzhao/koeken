#!/usr/bin/env python

"""
	pretty_lefse.py
	~~~~~~~~~
	A simple command line application to beautify multiple LEfSe outputs.
	:copyright: (c) 2015 by Thomas W. Battaglia.
	:license: BSD, see LICENSE for more details.
"""

__author__ = 'Thomas W. Battaglia'
__copyright__ = 'Copyright 2015'
__license__ = 'BSD'
__version__ = '0.0.1'
__email__ = 'tb1280@nyu,edu'
__status__ = 'Development'

import glob
import argparse
import os
import re
try:
	import pandas as pd
except ImportError:
	raise ImportError('The module """pandas"" was not found. '
	'Please install with """pip install pandas""" and try again')

try:
	import numpy as np
except ImportError:
	raise ImportError('The module """numpy"" was not found. '
	'Please install with """pip install numpy""" and try again')


def get_args():
	"""Gets arguments from command line inputs"""
	parser = argparse.ArgumentParser(description = 'Beautify the LEfSe output tables by combining all timepoints into one large table.', add_help = True)
	parser.add_argument('-v', '--version', action = 'version', version = __version__)

	"""Arguments for inputs"""
	parser.add_argument('-i', '--input', action = "store", dest = "input", help = 'Folder of the text files generated by LEfSe or Koeken.')
	parser.add_argument('-o', '--output', action = "store", dest = "output", help = 'Folder to place output files.')
	parser.add_argument('-c', '--control', action = "store", dest = "control", help = 'Name of your control group')
	parser.add_argument('-w', '--write', action = "store_true", dest = "write", help = 'Should prettified tables be written before merging?', default = True)
	return parser.parse_args()


def process_table(file_loc, write_values, output, control):
	"""Import results from run_lefse.py or galaxy browser. Write if true."""
	input_table = pd.read_csv(file_loc, sep = "\t", names = ["Taxa", "LogR", "Class", "Effect", "Pvalue"], index_col = "Taxa")
	input_table_filtered = input_table[input_table.Class.notnull()]
	name = os.path.splitext(os.path.basename(file_loc))[0]

	"""Write clean tables to disk if option is true"""
	if write_values == True:
		# make directory
		table_out = output + "/" + name + "_pretty.txt"
		input_table_filtered.to_csv(table_out, sep = '\t', header = True, index = True)

	""" Verify only two groups in class column"""
	group_num = input_table_filtered["Class"].describe()["unique"]
	if group_num > 2:
		raise ValueError("Too many groups present!. Pretty Lefse only works if there are two groups present")

	"""Negate effect size for all samples chosen to be control"""
	input_table_filtered.loc[(input_table_filtered.Class == str(control)), ['Effect']] *= -1

	"""Subset column to only include taxa and effect size"""
	input_table_filtered_effect = input_table_filtered[['Effect']]

	"""Rename Effect size to the file name"""
	input_table_filtered_effect.columns = [name]

	"""Clean up names"""
	#input_table_filtered_effect = input_table_filtered_effect.rename(columns = lambda x: re.sub('.', '|', x))

	return(input_table_filtered_effect)


if __name__ == '__main__':
	args = get_args()
	print "Prettifing the table. Please wait..."
	print ""
	if not os.path.exists(args.output):
		os.makedirs(args.output)
	frames = [ process_table(file_loc = f, write_values = args.write, output = args.output, control = args.control) for f in glob.glob(args.input + "/*.txt") ]
	result = pd.concat(frames, axis = 1)
	result.to_csv(args.output + "/pretty_table.txt", sep = '\t', header = True, index = True)
